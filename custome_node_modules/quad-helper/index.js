async function mapInstancesToType(map, key, set) {             
    set.forEach(countClassInstancesIterator => {                                       
        if (!map.has(key)) 
            map.set(key, new Set());
        
        map.get(key)
           .add(countClassInstancesIterator.entries.hashmap.node.value.value)   
        
    });
}

async function mapAttributesToType(
    map, 
    key, 
    array, 
    enumSet
) {            
    array.forEach(attributeIterator => {                                             
        
        if (!map.has(key)) 
            map.set(key, new Set());
        
        map.get(key)
           .add(attributeIterator.entries.hashmap.node.children[0].value.value)              
            // children[0] is name of current attribute
            // children[1] is current attribute value                      
                
        // search for enum data types, and save other data types for later checkup
        if ('NamedNode' == attributeIterator.entries.hashmap.node.children[1].value.constructor.name) {                                                            
            attributeValue = getClassTypeFromCIM(attributeIterator.entries.hashmap.node.children[1].value.value)            
            // enum values include '.' in them, example: enumClassName.enumValue
            if (attributeValue.includes('.')) 
                // save enumClassName
                enumSet.add(attributeValue.split('.')[0]);   
        } else {            
            // Do nothing, attribute data type must be repersented by NamedNode or Literal.
            // Literals are simple data types like integer, boolean, string...
            // They are distinguishable just by namespace. Therefore they don't need description.            
        }            
               
    });     
}

module.exports = { 
    mapInstancesToType,
    mapAttributesToType
};

function getClassTypeFromCIM(CIMClassType) {
    // example of CIMClassType string: http://iec.ch/TC57/CIM100#VoltageLimit
    // split it on # character and return right part    
    return CIMClassType.split("#")[1];
}